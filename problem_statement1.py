# -*- coding: utf-8 -*-
"""Problem_Statement1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z2oTqv6YXECRE5Sun-VdPlQmwgzygIO7
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

# Load the CSV file
df = pd.read_csv('/content/healthcare_dataset.csv')

# Preview the data
print("Initial Data Snapshot:")
print(df.head())

# Check for missing values
print("\nMissing Values:")
print(df.isnull().sum())

# Drop missing values (or you can use df.fillna(method='ffill') instead)
df = df.dropna()

# Re-check missing values and column types
print("\nColumn Data Types:")
print(df.dtypes)

print("\nMissing Values After Cleaning:")
print(df.isnull().sum())

# Plot readmission by age
if 'Age' in df.columns:
    plt.figure(figsize=(10, 5))
    sns.countplot(data=df, x='Age')
    plt.xticks(rotation=45)
    plt.title('Distribution by Age')
    plt.tight_layout()
    plt.show()

# Correlation heatmap for numeric features
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title('Feature Correlation')
plt.tight_layout()
plt.show()

# Drop columns that are irrelevant if any â€” currently empty list
# df = df.drop(['Column1', 'Column2'], axis=1)  # Replace with actual column names if needed

# Encode all categorical columns
le = LabelEncoder()
for col in df.select_dtypes(include=['object']).columns:
    df[col] = le.fit_transform(df[col])

# Check if 'Test Results' is in the dataset
if 'Test Results' not in df.columns:
    raise ValueError("'Test Results' column is missing from the dataset. Please specify the correct target column.")

# Split into features and target
X = df.drop('Test Results', axis=1)
y = df['Test Results']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluate the model
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

importances = model.feature_importances_
features = X.columns
indices = importances.argsort()[::-1]

plt.figure(figsize=(10, 6))
sns.barplot(x=importances[indices], y=features[indices])
plt.title('Feature Importances')
plt.tight_layout()
plt.show()

